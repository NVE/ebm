import numpy as np
import pandas as pd
import pytest

from ebm.model.construction import ConstructionCalculator as ConCal
from ebm.model.data_classes import YearRange


def test_calculate_floor_area_over_building_growth_kindergarten():
    """ Test calculate_floor_area_over_building_growth using values for kindergarten """

    population_growth = pd.Series(
        data=[np.nan, 0.012783749698190627, 0.013325393446137923, 0.01311807167054102, 0.011438894140588296,
              0.011106944218266523, 0.00932730290475714, 0.008502517747941418, 0.007093904760781866,
              0.006834706197707874, 0.0067082247633216685, 0.004579531185375796, 0.004769145431673838,
              0.005079664968399955, 0.004901019172519616, 0.004851166447310984, 0.004851024763977696,
              0.004772224379971046, 0.004710110860255856, 0.004641954396903625, 0.004552515607949337,
              0.004461181697092975, 0.00434392065986855, 0.004246772394870035, 0.004164812385301975,
              0.004080834397051092, 0.004005293784151265, 0.0038722220422711118, 0.0036902603836130865,
              0.0035114845279617946, 0.0033421050242241623, 0.0031766233305012825, 0.0030111720747318937,
              0.002846866995466657, 0.002686160663372572, 0.0025245549248480437, 0.002360641918193185,
              0.002200080909776636, 0.0020412601991794954, 0.0018872707716841575, 0.0017373379956102664],
        index=[y for y in range(2010, 2051)])
    building_growth = pd.Series(
        data=[np.nan,
              0.07035928643459943, 0.04756747511027215, 0.042732522797172434, 0.05303365530129667] + [0.0] * 36,
        index=[y for y in range(2010, 2051)])

    years = YearRange(start=2010, end=2050)

    # Start years (2011 - 2014) use building growth over population growth
    calculated_building_growth_over_population_growth = pd.Series(
        data=[np.nan, 5.503806636996176, 3.56968635129183, 3.2575308223948776, 4.636257198422607],
        index=[2010, 2011, 2012, 2013, 2014])

    # The next six years (2015-2020) use the mean of the start years
    calculated_mean_build_over_pop = pd.Series(
        data=[4.24182025227637] * 6,
        index=[y for y in range(2015, 2021)])

    # The next 10 years use the mean of the starting years multiplied by a cut-off calculated from number of years
    #   since the start of the period (2020)
    calculated_years = pd.Series(data=[3.91763822705, 3.59345620182, 3.26927417659, 2.94509215137,
                                       2.62091012614, 2.29672810091, 1.97254607568, 1.64836405046, 1.32418202523],
                                 index=[y for y in range(2021, 2030)]
                                 )
    fixed_rate_from_2030 = pd.Series(
        data=[1.0] * 21,
        index=[y for y in range(2030, 2051)]
    )

    expected = pd.concat([calculated_building_growth_over_population_growth,
                          calculated_mean_build_over_pop,
                          calculated_years,
                          fixed_rate_from_2030])

    result = ConCal.calculate_floor_area_over_building_growth(
        building_growth=building_growth,
        population_growth=population_growth,
        years=years)

    pd.testing.assert_series_equal(result, expected)


def test_calculate_floor_area_over_building_growth():
    # Sample data
    building_growth = pd.Series([1.2, 1.3, 1.4, 1.5, 1.6], index=[2010, 2011, 2012, 2013, 2014])
    population_growth = pd.Series([1.1, 1.2, 1.3, 1.4, 1.5], index=[2010, 2011, 2012, 2013, 2014])
    years = YearRange(start=2010, end=2050)

    # Expected result
    expected_result = pd.Series(
        [np.nan, 1.083333, 1.076923, 1.071429, 1.066667, 1.074588, 1.074588, 1.074588, 1.074588, 1.074588, 1.074588] +
        [1.067129, 1.05967, 1.05221, 1.044752, 1.037293, 1.029835, 1.022376, 1.014918, 1.007459]
        +[1.000000] * 21,
        index=range(2010, 2051)
    )

    # Calculate result
    result = ConCal.calculate_floor_area_over_building_growth(building_growth, population_growth, years)

    # Assert the result is as expected
    pd.testing.assert_series_equal(result, expected_result)


def test_calculate_floor_area_growth():
    """ Test calculate_floor_area returning growth based on total_floor_area """
    total_floor_area = pd.Series({2010: 1000, 2011: 1100, 2012: 1210, 2013: 1331, 2014: 1464.1})
    period = YearRange(2010, 2014)
    expected_growth = pd.Series({2010: np.nan, 2011: 0.1, 2012: 0.1, 2013: 0.1, 2014: 0.1})

    result = ConCal.calculate_floor_area_growth(total_floor_area, period)

    pd.testing.assert_series_equal(result, expected_growth)


def test_calculate_constructed_floor_area_kindergarten():
    constructed_floor_area = pd.Series({2010: 97574, 2011: 90644, 2012: 65847, 2013: 62022, 2014: 79992, 2015: np.nan})
    demolition_floor_area = pd.Series(
        {2010: 0.0, 2011: 919.1642857142858, 2012: 919.1642857142851, 2013: 919.1642857142858, 2014: 919.1642857142856,
         2015: 919.164285714287, 2016: 919.1642857142851, 2017: 919.164285714286, 2018: 919.164285714286,
         2019: 919.1642857142851, 2020: 919.164285714287, 2021: 919.164285714287, 2022: 919.1642857142851,
         2023: 919.1642857142851, 2024: 919.164285714287, 2025: 919.164285714287})
    total_floor_area = pd.Series(
        {2010: 1275238.0, 2011: 1364962.8357142857, 2012: 1429890.6714285715, 2013: 1490993.5071428572,
         2014: 1570066.342857143, 2015: 1644037.9161657556, 2016: 1709083.8527497717, 2017: 1770723.930727143,
         2018: 1824006.9064976668, 2019: 1876887.7763141114, 2020: 1930294.775005581, 2021: 1964926.090165381,
         2022: 1998600.4339443436, 2023: 2031790.8266201413, 2024: 2061117.6001179067, 2025: 2087323.6206190905})
    period = YearRange(2010, 2025)
    expected_constructed = pd.Series(
        {2010: 97574.0, 2011: 90644.0, 2012: 65847.0, 2013: 62022.0, 2014: 79992.0, 2015: 74890.73759432697,
         2016: 65965.10086973036, 2017: 62559.24226308569, 2018: 54202.14005623806, 2019: 53800.03410215887,
         2020: 54326.16297718395, 2021: 35550.479445514284, 2022: 34593.50806467679, 2023: 34109.556961511975,
         2024: 30245.937783479705, 2025: 27125.1847868981})

    result = ConCal.calculate_constructed_floor_area(
        constructed_floor_area,
        demolition_floor_area,
        total_floor_area,
        period)

    pd.testing.assert_series_equal(result, expected_constructed)


def test_calculate_total_floor_area_as_kindergarten():
    years = YearRange(2010, 2050)

    floor_area_over_population_growth = pd.Series(
        data={2010: np.nan, 2011: 5.503806636996176, 2012: 3.56968635129183, 2013: 3.2575308223948776,
              2014: 4.636257198422607, 2015: 4.241820252276373, 2016: 4.241820252276373, 2017: 4.241820252276373,
              2018: 4.241820252276373, 2019: 4.241820252276373, 2020: 4.241820252276373, 2021: 3.9176382270487355,
              2022: 3.5934562018210983, 2023: 3.269274176593461, 2024: 2.9450921513658237, 2025: 2.6209101261381864,
              2026: 2.296728100910549, 2027: 1.9725460756829118, 2028: 1.6483640504552746, 2029: 1.3241820252276373,
              2030: 1.0, 2031: 1.0, 2032: 1.0, 2033: 1.0, 2034: 1.0, 2035: 1.0, 2036: 1.0, 2037: 1.0, 2038: 1.0,
              2039: 1.0, 2040: 1.0, 2041: 1.0, 2042: 1.0, 2043: 1.0, 2044: 1.0, 2045: 1.0, 2046: 1.0, 2047: 1.0,
              2048: 1.0, 2049: 1.0, 2050: 1.0})
    population_growth = pd.Series(
        data={2010: np.nan, 2011: 0.012783749698190627, 2012: 0.013325393446137923, 2013: 0.01311807167054102,
              2014: 0.011438894140588296, 2015: 0.011106944218266523, 2016: 0.00932730290475714,
              2017: 0.008502517747941418, 2018: 0.007093904760781866, 2019: 0.006834706197707874,
              2020: 0.0067082247633216685, 2021: 0.004579531185375796, 2022: 0.004769145431673838,
              2023: 0.005079664968399955, 2024: 0.004901019172519616, 2025: 0.004851166447310984,
              2026: 0.004851024763977696, 2027: 0.004772224379971046, 2028: 0.004710110860255856,
              2029: 0.004641954396903625, 2030: 0.004552515607949337, 2031: 0.004461181697092975,
              2032: 0.00434392065986855, 2033: 0.004246772394870035, 2034: 0.004164812385301975,
              2035: 0.004080834397051092, 2036: 0.004005293784151265, 2037: 0.0038722220422711118,
              2038: 0.0036902603836130865, 2039: 0.0035114845279617946, 2040: 0.0033421050242241623,
              2041: 0.0031766233305012825, 2042: 0.0030111720747318937, 2043: 0.002846866995466657,
              2044: 0.002686160663372572, 2045: 0.0025245549248480437, 2046: 0.002360641918193185,
              2047: 0.002200080909776636, 2048: 0.0020412601991794954, 2049: 0.0018872707716841575,
              2050: 0.0017373379956102664}

    )
    total_floor_area = pd.Series(
        data={2010: 1275238.0, 2011: 1364962.8357142857, 2012: 1429890.6714285715, 2013: 1490993.5071428572,
              2014: 1570066.342857143})

    expected = pd.Series({2010: 1275238.0, 2011: 1364962.8357142857, 2012: 1429890.6714285715, 2013: 1490993.5071428572,
                          2014: 1570066.342857143, 2015: 1644037.9161657556, 2016: 1709083.8527497717,
                          2017: 1770723.930727143, 2018: 1824006.9064976668, 2019: 1876887.7763141114,
                          2020: 1930294.775005581, 2021: 1964926.090165381, 2022: 1998600.4339443436,
                          2023: 2031790.8266201413, 2024: 2061117.6001179067, 2025: 2087323.6206190905,
                          2026: 2110579.505206357, 2027: 2130447.3028574944, 2028: 2146988.0476022293,
                          2029: 2160185.137790355, 2030: 2170019.4143462055, 2031: 2179700.265239823,
                          2032: 2189168.7102543195, 2033: 2198465.611500741, 2034: 2207621.80830818,
                          2035: 2216630.7473192043, 2036: 2225509.0046732007, 2037: 2234126.669696369,
                          2038: 2242371.1788375233, 2039: 2250245.230537959, 2040: 2257765.7864286765,
                          2041: 2264937.8579006535, 2042: 2271757.975529367, 2043: 2278225.3683315897,
                          2044: 2284345.0476982994, 2045: 2290112.0022385186, 2046: 2295518.13662836,
                          2047: 2300568.4622588023, 2048: 2305264.521096299, 2049: 2309615.1794479643,
                          2050: 2313627.7616544575})

    result = ConCal.calculate_total_floor_area(
        floor_area_over_population_growth=floor_area_over_population_growth,
        population_growth=population_growth,
        total_floor_area=total_floor_area,
        period=years)

    pd.testing.assert_series_equal(result, expected)


if __name__ == "__main__":
    pytest.main()
